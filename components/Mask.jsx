/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/mask.glb 
*/

import React, { Suspense, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import useMousePosition from '@/lib/useMousePosition'
import { useFrame } from '@react-three/fiber'
import { useScroll, animated } from '@react-spring/three'
export default function Mask(props) {
  const { nodes, materials } = useGLTF('/maskCompressed.glb')
  const {x,y} = useMousePosition()
  const { scrollYProgress } = useScroll()
  useFrame(({ clock, camera }) => {
    const elapsedTime = clock.getElapsedTime();
    const radius = 10; // Define the radius of the circular path
    camera.position.x = radius * Math.cos(x) ;
    camera.position.z = radius * Math.sin(x) ;
    camera.position.y =  y ;
    camera.lookAt(0, 0, 0); // Make the camera always look at the center of the scene
  });
  return (
    <Suspense fallback={null}>
    <animated.group {...props} dispose={null} position={[0, -0.1, 0]} scale={8} rotation-y={scrollYProgress}>
      <mesh geometry={nodes.vendetta_mask_low.geometry} material={materials.colorcheck} />
    </animated.group>
    </Suspense>
  )
}

useGLTF.preload('/maskCompressed.glb')
